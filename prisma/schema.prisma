generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model accounts {
  account_id    Int             @id @default(autoincrement())
  username      String
  phone_number  String          @unique
  password      String
  created_at    DateTime        @default(now())
  account_roles account_roles[]
  bookings      bookings[]
  favorites     favorites[]
  vehicles      vehicles[]

  @@map("accounts")
}

model roles {
  role_id       Int             @id @default(autoincrement())
  role_name     String          @unique @db.VarChar(50)
  account_roles account_roles[]

  @@map("roles")
}

model account_roles {
  account_id Int
  role_id    Int
  account    accounts @relation(fields: [account_id], references: [account_id], onDelete: Cascade)
  role       roles    @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([account_id, role_id])
  @@map("account_roles")
}

model vehicles {
  vehicle_id              Int                       @id @default(autoincrement())
  lessor_id               Int
  name                    String                    @db.VarChar(255)
  rating                  Decimal?                  @default(0.0) @db.Decimal(2, 1)
  total_trips             Int?                      @default(0)
  location                String
  transmission            String?                   @db.VarChar(50)
  seats                   Int?
  fuel_type               String?                   @db.VarChar(50)
  base_price              Decimal                   @db.Decimal(10, 2)
  vehicle_type            String?                   @db.VarChar(50)
  description             String?
  status                  VehicleStatus             @default(available)
  is_favorite             Boolean                   @default(false)
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @default(now()) @updatedAt
  bookings                bookings[]
  favorites               favorites[]
  vehicle_amenity_mapping vehicle_amenity_mapping[]
  vehicle_images          vehicle_images[]
  lessor                  accounts                  @relation(fields: [lessor_id], references: [account_id], onDelete: Cascade)

  @@map("vehicles")
}

model bookings {
  booking_id       Int           @id @default(autoincrement())
  vehicle_id       Int
  renter_id        Int
  pickup_date      DateTime      @db.Date
  pickup_time      DateTime      @db.Time(6)
  return_date      DateTime      @db.Date
  return_time      DateTime      @db.Time(6)
  pickup_location  String
  return_location  String
  total_price      Decimal       @db.Decimal(15, 2)
  discount_applied Decimal?      @default(0.00) @db.Decimal(15, 2)
  final_price      Decimal       @db.Decimal(15, 2)
  status           BookingStatus @default(pending)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt
  renter           accounts      @relation(fields: [renter_id], references: [account_id], onDelete: Cascade)
  vehicle          vehicles      @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade)

  @@map("bookings")
}

model vehicle_amenities {
  amenity_id              Int                       @id @default(autoincrement())
  amenity_name            String                    @unique @db.VarChar(50)
  amenity_icon            String?                   @db.VarChar(50)
  description             String?
  vehicle_amenity_mapping vehicle_amenity_mapping[]

  @@map("vehicle_amenities")
}

model vehicle_amenity_mapping {
  vehicle_id Int
  amenity_id Int
  amenity    vehicle_amenities @relation(fields: [amenity_id], references: [amenity_id], onDelete: Cascade)
  vehicle    vehicles          @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade)

  @@id([vehicle_id, amenity_id])
  @@map("vehicle_amenity_mapping")
}

model vehicle_images {
  image_id      Int      @id @default(autoincrement())
  vehicle_id    Int
  image_url     String
  is_primary    Boolean  @default(false)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  vehicle       vehicles @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade)

  @@index([is_primary])
  @@map("vehicle_images")
}

model favorites {
  id         Int      @id @default(autoincrement())
  account_id Int
  vehicle_id Int
  created_at DateTime @default(now())
  account    accounts @relation(fields: [account_id], references: [account_id], onDelete: Cascade)
  vehicle    vehicles @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Cascade)

  @@unique([account_id, vehicle_id])
  @@map("favorites")
}

enum VehicleStatus {
  available
  rented
  maintenance
  inactive
}

enum BookingStatus {
  pending
  confirmed
  ongoing
  completed
  cancelled
}
